{%- func zigConsts(data *ConstTemplateData) -%}
// {%s data.DoNotEdit %}

const std = @import("std");

pub const datastar_key = "{%s data.DatastarKey %}";
pub const version = "{%s data.Version %}";

// #region Defaults

// #region Default durations

{%- for _, d := range data.DefaultDurations -%}
/// {%s= d.Description %}
pub const default_{%s d.Name.Snake %} = {%d durationToMs(d.Duration) %};
{%- endfor -%}

// #endregion

// #region Default strings

{%- for _, s := range data.DefaultStrings -%}
/// {%s= s.Description %}
pub const default_{%s s.Name.Snake %} = "{%s s.Value %}";
{%- endfor -%}

// #endregion

// #region Datalines

{%- for _, literal := range data.DatalineLiterals -%}
pub const {%s literal.Snake %}_dataline_literal = "{%s literal.Camel %}";
{%- endfor -%}

// #endregion

// #region Default booleans

{%- for _, b := range data.DefaultBools -%}
/// {%s= b.Description %}
pub const default_{%s b.Name.Snake %} = {%v b.Value %};
{%- endfor -%}

// #endregion

// #region Enums

{%- for _, enum := range data.Enums -%}
/// {%s= enum.Description %}
pub const {%s enum.Name.Pascal %} = enum {
{%- for _, entry := range enum.Values -%}
    /// {%s= entry.Description %}
    {%s entry.Name.Snake %},
{%- endfor -%}

    pub fn format(
        self: @This(),
        comptime fmt: []const u8,
        options: std.fmt.FormatOptions,
        writer: anytype,
    ) !void {
        _ = fmt;
        _ = options;

        try writer.writeAll(
            switch (self) {
{%- for _, entry := range enum.Values -%}
                .{%s entry.Name.Snake %} => "{%s entry.Value %}",
{%- endfor -%}
            },
        );
    }
};

{%- if enum.Default != nil -%}
pub const default_{%s enum.Name.Snake %} = {%s enum.Name.Pascal %}.{%s enum.Default.Name.Snake %};
{%- endif -%}

{%- endfor -%}
// #endregion

// #endregion
{%- endfunc -%}