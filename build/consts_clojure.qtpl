{%- func clojureConsts(data *ConstTemplateData) -%}
;; {%s data.DoNotEdit %}
(ns starfederation.datastar.clojure.consts
  (:require
    [clojure.string :as string]))


(def datastar-key                  "{%s data.DatastarKey %}")
(def version                       "{%s data.Version %}")


;; -----------------------------------------------------------------------------
;; Default durations
;; -----------------------------------------------------------------------------
{%- for _, d := range data.DefaultDurations -%}
(def default-{%s d.Name.Kebab %}
  "{%s= d.Description %}"
  {%d durationToMs(d.Duration) %})

{%- endfor -%}

;; -----------------------------------------------------------------------------
;; Default values
;; -----------------------------------------------------------------------------
{%- for _, s := range data.DefaultStrings -%}
(def default-{%s s.Name.Kebab %}
  "{%s= s.Description %}"
  (-> "{%s s.Value %}"
      (string/split #" ")
      (update 0 keyword)
      (->> (apply array-map))))

{%- endfor -%}

;; -----------------------------------------------------------------------------
;; Dataline literals
;; -----------------------------------------------------------------------------
{%- for _, literal := range data.DatalineLiterals -%}
(def {%s literal.Kebab %}-dataline-literal "{%s literal.Camel %} ")
{%- endfor -%}


;; -----------------------------------------------------------------------------
;; Default booleans
;; -----------------------------------------------------------------------------
{%- for _, b := range data.DefaultBools -%}
(def default-{%s b.Name.Kebab %}
  "{%s= b.Description %}"
  {%v b.Value %})

{%- endfor -%}


;; -----------------------------------------------------------------------------
;; Enums
;; -----------------------------------------------------------------------------
{%- for _, enum := range data.Enums -%}
;; {%s enum.Name.Pascal %}

{%- for _, entry := range enum.Values -%}
(def {%s enum.Name.Kebab %}-{%s entry.Name.Kebab %}
  "{%s= entry.Description %}"
  "{%s entry.Value %}")

{%- endfor -%}

{%- if enum.Default != nil -%}
(def default-{%s enum.Name.Kebab %}
  "Default value for {%s enum.Name.Pascal %}.
  {%s= enum.Default.Description %}"
  {%s enum.Name.Kebab %}-{%s enum.Default.Name.Kebab %})
{%- endif -%}


{%- endfor -%}

{%- endfunc -%}
