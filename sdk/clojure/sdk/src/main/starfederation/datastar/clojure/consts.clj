;; This is auto-generated by Datastar. DO NOT EDIT.
(ns starfederation.datastar.clojure.consts
  (:require
    [clojure.string :as string]))


(def datastar-key                  "datastar")
(def version                       "1.0.0-beta.11")


;; -----------------------------------------------------------------------------
;; Default durations
;; -----------------------------------------------------------------------------
(def default-sse-retry-duration
  "The default duration for retrying SSE on connection reset. This is part of the underlying retry mechanism of SSE."
  1000)


;; -----------------------------------------------------------------------------
;; Default values
;; -----------------------------------------------------------------------------
(def default-execute-script-attributes
  "The default attributes for <script/> element use when executing scripts. It is a set of key-value pairs delimited by a newline \\n character."
  (-> "type module"
      (string/split #" ")
      (update 0 keyword)
      (->> (apply array-map))))


;; -----------------------------------------------------------------------------
;; Dataline literals
;; -----------------------------------------------------------------------------
(def selector-dataline-literal "selector ")
(def merge-mode-dataline-literal "mergeMode ")
(def elements-dataline-literal "elements ")
(def use-view-transition-dataline-literal "useViewTransition ")
(def signals-dataline-literal "signals ")
(def only-if-missing-dataline-literal "onlyIfMissing ")
(def script-dataline-literal "script ")
(def attributes-dataline-literal "attributes ")
(def auto-remove-dataline-literal "autoRemove ")


;; -----------------------------------------------------------------------------
;; Default booleans
;; -----------------------------------------------------------------------------
(def default-elements-use-view-transitions
  "Should elements be merged using the ViewTransition API?"
  false)

(def default-merge-signals-only-if-missing
  "Should a given set of signals merge if they are missing?"
  false)

(def default-execute-script-auto-remove
  "Should script element remove itself after execution?"
  true)



;; -----------------------------------------------------------------------------
;; Enums
;; -----------------------------------------------------------------------------
;; ElementMergeMode

(def element-merge-mode-outer
  "Morphs the element into the existing element using Datastar's morphing, preserving focus and minimizing element changes."
  "outer")

(def element-merge-mode-inner
  "Morphs the element into the innerHTML using Datastar's morphing, preserving focus and minimizing element changes."
  "inner")

(def element-merge-mode-remove
  "Removes the existing element from the DOM."
  "remove")

(def element-merge-mode-prepend
  "Prepends the element inside the existing element."
  "prepend")

(def element-merge-mode-append
  "Appends the element inside the existing element."
  "append")

(def element-merge-mode-before
  "Inserts the element before the existing element."
  "before")

(def element-merge-mode-after
  "Inserts the element after the existing element."
  "after")


(def default-element-merge-mode
  "Default value for ElementMergeMode.
  Morphs the element into the existing element using Datastar's morphing, preserving focus and minimizing element changes."
  element-merge-mode-outer)


;; EventType

(def event-type-merge-elements
  "An event for merging HTML elements into the DOM."
  "datastar-merge-elements")

(def event-type-merge-signals
  "An event for merging signals."
  "datastar-merge-signals")

(def event-type-execute-script
  "An event for executing <script/> elements in the browser."
  "datastar-execute-script")