// This is auto-generated by Datastar. DO NOT EDIT.

const std = @import("std");

pub const datastar_key = "datastar";
pub const version = "1.0.0-beta.11";

// #region Defaults

// #region Default durations

/// The default duration for retrying SSE on connection reset. This is part of the underlying retry mechanism of SSE.
pub const default_sse_retry_duration = 1000;

// #endregion

// #region Default strings

/// The default attributes for <script/> element use when executing scripts. It is a set of key-value pairs delimited by a newline \\n character.
pub const default_execute_script_attributes = "type module";

// #endregion

// #region Datalines

pub const selector_dataline_literal = "selector";
pub const merge_mode_dataline_literal = "mergeMode";
pub const elements_dataline_literal = "elements";
pub const use_view_transition_dataline_literal = "useViewTransition";
pub const signals_dataline_literal = "signals";
pub const only_if_missing_dataline_literal = "onlyIfMissing";
pub const script_dataline_literal = "script";
pub const attributes_dataline_literal = "attributes";
pub const auto_remove_dataline_literal = "autoRemove";

// #endregion

// #region Default booleans

/// Should elements be merged using the ViewTransition API?
pub const default_elements_use_view_transitions = false;
/// Should a given set of signals merge if they are missing?
pub const default_merge_signals_only_if_missing = false;
/// Should script element remove itself after execution?
pub const default_execute_script_auto_remove = true;

// #endregion

// #region Enums

/// The mode in which an element is merged into the DOM.
pub const ElementMergeMode = enum {
    /// Morphs the element into the existing element using Datastar's morphing, preserving focus and minimizing element changes.
    outer,
    /// Morphs the element into the innerHTML using Datastar's morphing, preserving focus and minimizing element changes.
    inner,
    /// Removes the existing element from the DOM.
    remove,
    /// Prepends the element inside the existing element.
    prepend,
    /// Appends the element inside the existing element.
    append,
    /// Inserts the element before the existing element.
    before,
    /// Inserts the element after the existing element.
    after,

    pub fn format(
        self: @This(),
        comptime fmt: []const u8,
        options: std.fmt.FormatOptions,
        writer: anytype,
    ) !void {
        _ = fmt;
        _ = options;

        try writer.writeAll(
            switch (self) {
                .outer => "outer",
                .inner => "inner",
                .remove => "remove",
                .prepend => "prepend",
                .append => "append",
                .before => "before",
                .after => "after",
            },
        );
    }
};

pub const default_element_merge_mode = ElementMergeMode.outer;

/// The type protocol on top of SSE which allows for core pushed based communication between the server and the client.
pub const EventType = enum {
    /// An event for merging HTML elements into the DOM.
    merge_elements,
    /// An event for merging signals.
    merge_signals,
    /// An event for executing <script/> elements in the browser.
    execute_script,

    pub fn format(
        self: @This(),
        comptime fmt: []const u8,
        options: std.fmt.FormatOptions,
        writer: anytype,
    ) !void {
        _ = fmt;
        _ = options;

        try writer.writeAll(
            switch (self) {
                .merge_elements => "datastar-merge-elements",
                .merge_signals => "datastar-merge-signals",
                .execute_script => "datastar-execute-script",
            },
        );
    }
};


// #endregion

// #endregion