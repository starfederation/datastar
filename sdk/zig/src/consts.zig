// This is auto-generated by Datastar. DO NOT EDIT.

const std = @import("std");

pub const datastar_key = "datastar";
pub const version = "1.0.0-RC.13";

// #region Defaults

// #region Default durations

/// The default duration for retrying SSE on connection reset. This is part of the underlying retry mechanism of SSE.
pub const default_sse_retry_duration = 1000;

// #endregion

// #region Default strings


// #endregion

// #region Datalines

pub const selector_dataline_literal = "selector";
pub const mode_dataline_literal = "mode";
pub const elements_dataline_literal = "elements";
pub const use_view_transition_dataline_literal = "useViewTransition";
pub const signals_dataline_literal = "signals";
pub const only_if_missing_dataline_literal = "onlyIfMissing";

// #endregion

// #region Default booleans

/// Should elements be patched using the ViewTransition API?
pub const default_elements_use_view_transitions = false;
/// Should a given set of signals patch if they are missing?
pub const default_patch_signals_only_if_missing = false;

// #endregion

// #region Enums

/// The mode in which an element is patched into the DOM.
pub const ElementPatchMode = enum {
    /// Morphs the element into the existing element.
    outer,
    /// Replaces the inner HTML of the existing element.
    inner,
    /// Removes the existing element.
    remove,
    /// Replaces the existing element with the new element.
    replace,
    /// Prepends the element inside to the existing element.
    prepend,
    /// Appends the element inside the existing element.
    append,
    /// Inserts the element before the existing element.
    before,
    /// Inserts the element after the existing element.
    after,

    pub fn format(
        self: @This(),
        comptime fmt: []const u8,
        options: std.fmt.FormatOptions,
        writer: anytype,
    ) !void {
        _ = fmt;
        _ = options;

        try writer.writeAll(
            switch (self) {
                .outer => "outer",
                .inner => "inner",
                .remove => "remove",
                .replace => "replace",
                .prepend => "prepend",
                .append => "append",
                .before => "before",
                .after => "after",
            },
        );
    }
};

pub const default_element_patch_mode = ElementPatchMode.outer;

/// The type protocol on top of SSE which allows for core pushed based communication between the server and the client.
pub const EventType = enum {
    /// An event for patching HTML elements into the DOM.
    patch_elements,
    /// An event for patching signals.
    patch_signals,

    pub fn format(
        self: @This(),
        comptime fmt: []const u8,
        options: std.fmt.FormatOptions,
        writer: anytype,
    ) !void {
        _ = fmt;
        _ = options;

        try writer.writeAll(
            switch (self) {
                .patch_elements => "datastar-patch-elements",
                .patch_signals => "datastar-patch-signals",
            },
        );
    }
};


// #endregion

// #endregion