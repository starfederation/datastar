// This is auto-generated by Datastar. DO NOT EDIT.

namespace StarFederation.Datastar;

using System;

public enum FragmentMergeMode
{
    /// Morphs the fragment into the existing element using idiomorph.
    Morph,
    /// Replaces the inner HTML of the existing element.
    Inner,
    /// Replaces the outer HTML of the existing element.
    Outer,
    /// Prepends the fragment to the existing element.
    Prepend,
    /// Appends the fragment to the existing element.
    Append,
    /// Inserts the fragment before the existing element.
    Before,
    /// Inserts the fragment after the existing element.
    After,
    /// Upserts the attributes of the existing element.
    UpsertAttributes,

}
public enum EventType
{
    /// An event for merging HTML fragments into the DOM.
    MergeFragments,
    /// An event for merging signals.
    MergeSignals,
    /// An event for removing HTML fragments from the DOM.
    RemoveFragments,
    /// An event for removing signals.
    RemoveSignals,
    /// An event for executing &lt;script/&gt; elements in the browser.
    ExecuteScript,

}

public static class Consts
{
    public const string DatastarKey = "datastar";
    public const string Version     = "1.0.0-beta.11";

    /// Default: TimeSpan.FromMilliseconds 1000
    public static readonly TimeSpan DefaultSseRetryDuration = TimeSpan.FromMilliseconds(1000);


    /// Default: morph - Morphs the fragment into the existing element using idiomorph.
    public const FragmentMergeMode DefaultFragmentMergeMode = FragmentMergeMode.Morph;

    public const bool DefaultFragmentsUseViewTransitions = false;
    public const bool DefaultMergeSignalsOnlyIfMissing = false;
    public const bool DefaultExecuteScriptAutoRemove = true;

    public const string DefaultExecuteScriptAttributes = "type module";

    public const string DatastarDatalineSelector = "selector";
    public const string DatastarDatalineMergeMode = "mergeMode";
    public const string DatastarDatalineFragments = "fragments";
    public const string DatastarDatalineUseViewTransition = "useViewTransition";
    public const string DatastarDatalineSignals = "signals";
    public const string DatastarDatalineOnlyIfMissing = "onlyIfMissing";
    public const string DatastarDatalinePaths = "paths";
    public const string DatastarDatalineScript = "script";
    public const string DatastarDatalineAttributes = "attributes";
    public const string DatastarDatalineAutoRemove = "autoRemove";

    public static string EnumToString( FragmentMergeMode enumValue ) => enumValue switch {
        FragmentMergeMode.Morph => "morph",
        FragmentMergeMode.Inner => "inner",
        FragmentMergeMode.Outer => "outer",
        FragmentMergeMode.Prepend => "prepend",
        FragmentMergeMode.Append => "append",
        FragmentMergeMode.Before => "before",
        FragmentMergeMode.After => "after",
        FragmentMergeMode.UpsertAttributes => "upsertAttributes",
        _ => throw new NotImplementedException($"FragmentMergeMode.{enumValue}")
    };
    public static string EnumToString( EventType enumValue ) => enumValue switch {
        EventType.MergeFragments => "datastar-merge-fragments",
        EventType.MergeSignals => "datastar-merge-signals",
        EventType.RemoveFragments => "datastar-remove-fragments",
        EventType.RemoveSignals => "datastar-remove-signals",
        EventType.ExecuteScript => "datastar-execute-script",
        _ => throw new NotImplementedException($"EventType.{enumValue}")
    };
}