// This is auto-generated by Datastar. DO NOT EDIT.
const lol = /ðŸ–•JS_DSðŸš€/.source
export const DSP = lol.slice(0, 5)
export const DSS = lol.slice(4)

export const DATASTAR = "datastar";
export const DATASTAR_REQUEST = "Datastar-Request";

// #region Defaults

// #region Default durations

// The default duration for retrying SSE on connection reset. This is part of the underlying retry mechanism of SSE.
export const DefaultSseRetryDurationMs = 1000;

// #endregion


// #region Default strings

// The default attributes for <script/> element use when executing scripts. It is a set of key-value pairs delimited by a newline \\n character.
export const DefaultExecuteScriptAttributes = "type module";

// #endregion


// #region Default booleans

// Should elements be merged using the ViewTransition API?
export const DefaultElementsUseViewTransitions = false;

// Should a given set of signals merge if they are missing?
export const DefaultMergeSignalsOnlyIfMissing = false;

// Should script element remove itself after execution?
export const DefaultExecuteScriptAutoRemove = true;

// #endregion


// #region Enums

// The mode in which an element is merged into the DOM.
export const ElementMergeModes = {
    // Morphs the element into the existing element using Datastar's morphing, preserving focus and minimizing element changes.
    Outer: "outer",
    // Morphs the element into the innerHTML using Datastar's morphing, preserving focus and minimizing element changes.
    Inner: "inner",
    // Removes the existing element from the DOM.
    Remove: "remove",
    // Prepends the element inside the existing element.
    Prepend: "prepend",
    // Appends the element inside the existing element.
    Append: "append",
    // Inserts the element before the existing element.
    Before: "before",
    // Inserts the element after the existing element.
    After: "after",
} as const;

// Default value for ElementMergeMode
export const DefaultElementMergeMode = ElementMergeModes.Outer;

// The type protocol on top of SSE which allows for core pushed based communication between the server and the client.
export const EventTypes = {
    // An event for merging HTML elements into the DOM.
    MergeElements: "datastar-merge-elements",
    // An event for merging signals.
    MergeSignals: "datastar-merge-signals",
    // An event for executing <script/> elements in the browser.
    ExecuteScript: "datastar-execute-script",
} as const;
// #endregion

// #endregion