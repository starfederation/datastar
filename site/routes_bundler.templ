package site

import (
	"fmt"
	"github.com/dustin/go-humanize"
	datastar "github.com/starfederation/datastar/sdk/go"
	"net/http"
	"path/filepath"
	"strings"
)

templ PageBundler(r *http.Request, manifest PluginManifest, store *BundlerStore) {
	@Page("Bundler", "Bundle only the plugins you need to reduce the size of Datastar even further.", "/bundler") {
		@header(r)
		<div data-signals={ templ.JSONString(store) } class="p-8 flex flex-col gap-8">
			<div>
				<div class="text-6xl font-brand font-bold text-center">Bundler</div>
				<div class="text-center">While Datastar is still one of the smallest frameworks available, you can bundle only the plugins you need to reduce the size even further.</div>
			</div>
			<div id="results"></div>
			<button class="btn btn-primary btn-block" data-on-click={ datastar.PostSSE("/bundler") }>
				@icon("material-symbols:build")
				Bundle
			</button>
			<div>
				<div class="flex justify-between items-center">
					<div class="font-bold text-3xl">Plugins</div>
					<div class="flex gap-2">
						<button class="btn" data-on-click="@toggleAll('includedPlugins.static_library_source_plugins_')">Toggle</button>
						<button class="btn" data-on-click="@setAll('includedPlugins.static_library_source_plugins_',true)">All</button>
						<button class="btn" data-on-click="@setAll('includedPlugins.static_library_source_plugins_',false)">None</button>
					</div>
				</div>
				<div class="flex flex-wrap gap-2 justify-around">
					{{
						currentPath := ""
					}}
					for _, plugin := range manifest.Plugins {
						{{
						signal := fmt.Sprintf("includedPlugins.%s", plugin.Key)
						pluginDir := filepath.Dir(plugin.Path[11:])
						}}
						if currentPath != pluginDir {
							<div class="divider w-full font-mono text-neutral">{ pluginDir }</div>
							{{ currentPath = pluginDir }}
						}
						<details class="collapse collapse-arrow bg-base-200">
							<summary class="collapse-title">
								<div class="flex flex-wrap items-center gap-4 justify-between">
									<div class="flex gap-4 items-center text-xl">
										@icon(plugin.Icon)
										<input class="toggle toggle-success" type="checkbox" data-bind={ signal }/>
										<div class="flex item-center font-mono">
											<div>{ plugin.Label }</div>
										</div>
									</div>
									<div class="text-xs italic">{ plugin.Slug }</div>
								</div>
							</summary>
							<div class="collapse-content">
								<table class="table">
									<tr>
										<td>Name</td>
										<th>{ plugin.Name }</th>
									</tr>
									if plugin.Description !="" {
										<tr>
											<td>Description</td>
											<th>{ plugin.Description }</th>
										</tr>
									}
									<tr>
										<td>Authors</td>
										<th>{ plugin.Authors }</th>
									</tr>
									<tr>
										<td>Path</td>
										<th>{ plugin.Path[11:] }.ts</th>
									</tr>
									<tr>
										<td>Source</td>
										<th>
											<div class="mockup-code">
												{{ lines := strings.Split(plugin.Contents, "\n") }}
												for _, line := range lines {
													if !strings.HasPrefix(line, "//") {
														<pre>{ line }</pre>
													}
												}
											</div>
										</th>
									</tr>
								</table>
							</div>
						</details>
					}
				</div>
			</div>
			<div>
				<div class="flex justify-between items-center">
					<div class="font-bold text-3xl">Advanced</div>
				</div>
				<label class="form-control w-full">
					<div class="label">
						<span class="label-text">Alias Prefix</span>
						<div class="label-text">
							Only use this if you have some conflict with a legacy library.
						</div>
					</div>
					<input type="text" class="input input-bordered w-full lowercase" data-bind-alias/>
					<div class="label" data-show="$alias">
						<div class="label-text-alt">
							For example it will change
							<span class="font-bold text-primary lowercase">data-on-click</span>
							to
							<span class="font-bold text-primary lowercase" data-text="`data-${$alias}-on-click`"></span>.
							You now will have to convert any issues or errors back to the original form before reporting them if you want help.
							This is a last resort and should be avoided if possible.
						</div>
					</div>
				</label>
			</div>
		</div>
	}
}

templ bundlerResultsFragment(results BundleResults) {
	<div id="results" class="flex gap-8">
		<table class="table w-full">
			<thead>
				<tr>
					<th>Hash</th>
					<th>Compile Time</th>
					<th>Source Size Gzipped</th>
					<th>Fast 4G</th>
					<th>Slow 4G</th>
					<th>3G</th>
					<th class="text-right">Download</th>
				</tr>
			</thead>
			<tbody>
				{{
					srcBitsF := float64(8 * results.SourceSizeGzipped)
					srcTime := func(mbps float64) string {
						srcSecsF := srcBitsF / (mbps * 1024 * 1024)
						return fmt.Sprintf("%0.1fms", srcSecsF*1000)
					}
				}}
				<tr>
					<td>{ results.Hash }</td>
					<td>{ results.CompileTime.String() }</td>
					<td>{ humanize.Comma(int64( results.SourceSizeGzipped)) } ({ humanize.IBytes(results.SourceSizeGzipped) }) </td>
					<td>{ srcTime(9) }</td>
					<td>{ srcTime(1.6) }</td>
					<td>{ srcTime(0.5) }</td>
					<td class="text-right">
						<a class="btn btn-success" href={ templ.SafeURL(results.DownloadURL) }>
							@icon("material-symbols:folder-zip")
							{ results.Name }.zip
						</a>
					</td>
				</tr>
			</tbody>
		</table>
	</div>
}
